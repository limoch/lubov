import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    BotCommand,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from conf import TOKEN
from db import init_db, save_user, get_user, get_all_users, delete_user
from keyboards import choose, gender, lovechoose, mainmenu
import random

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_inputs = {}
temp_profiles = {}
viewed_profiles = {}  # user_id: [user_ids –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–∏–¥–µ–ª]


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="setname", description="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="profile", description="–ú–æ—è –∞–Ω–∫–µ—Ç–∞"),
        BotCommand(command="profiles", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç"),
    ]
    await bot.set_my_commands(commands)


async def send_profile(user_id, chat_id):
    user = await get_user(user_id)
    if user:
        name, age, gender, interests, photo_id = user
        caption = f"üßæ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}"
        await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption)
    else:
        await bot.send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∞–Ω–∫–µ—Ç—É. –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å? üòä", reply_markup=choose)


async def sendrandom_profile(user_id, chat_id):
    all_users = await get_all_users()

    # –í—Å–µ –¥—Ä—É–≥–∏–µ –∞–Ω–∫–µ—Ç—ã –∫—Ä–æ–º–µ —Å–≤–æ–µ–π
    other_users = [user for user in all_users if str(user[0]) != str(user_id)]

    if not other_users:
        await bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç üòî")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ id, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∏–¥–µ–ª
    seen = viewed_profiles.get(user_id, [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º –µ—â—ë –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã
    unseen_users = [user for user in other_users if user[0] not in seen]

    if not unseen_users:
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        viewed_profiles[user_id] = []
        await bot.send_message(chat_id, "–¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –∞–Ω–∫–µ—Ç—ã. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ üîÅ")
        unseen_users = other_users

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∞–Ω–∫–µ—Ç—É –∏–∑ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö
    random_user = random.choice(unseen_users)
    viewed_profiles.setdefault(user_id, []).append(random_user[0])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é

    _, name, age, gender, interests, photo_id = random_user
    caption = f"üíò –°–ª—É—á–∞–π–Ω–∞—è –∞–Ω–∫–µ—Ç–∞:\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}"
    await bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption, reply_markup=lovechoose)


@dp.message(Command("start"))
async def start_command(message: Message):
    user_id = message.from_user.id
    profile = await get_user(user_id)
    if not profile:
        user_inputs[user_id] = "name"
        temp_profiles[user_id] = {}
        await message.answer("–ü—Ä–∏–≤–µ—Ç!", reply_markup=mainmenu)
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=choose)


@dp.message(Command("setname"))
async def set_name(message: Message):
    user_id = message.from_user.id
    profile = await get_user(user_id)
    if not profile:
        user_inputs[user_id] = "name"
        temp_profiles[user_id] = {}
        await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        await message.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ?", reply_markup=choose)


@dp.message(Command("profile"))
async def show_profile(message: Message):
    await send_profile(message.from_user.id, message.chat.id)


@dp.message(Command("profiles"))
async def profiles_command(message: Message):
    all_users = await get_all_users()
    if not all_users:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∫–µ—Ç.")
        return

    text = "\n\n".join([
        f"ID: {uid}\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–ü–æ–ª: {gender}\n–ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}\n–§–æ—Ç–æ: {photo_id}"
        for uid, name, age, gender, interests, photo_id in all_users
    ])
    await message.answer(text)


@dp.callback_query()
async def handle_re_register(callback: CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data

    if action == "yes":
        await delete_user(user_id)
        user_inputs[user_id] = "name"
        temp_profiles[user_id] = {}
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏ –∏–º—è:")
    elif action == "no":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å üòä", reply_markup=mainmenu)
    elif action == "like":
        await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ. –í–≤–µ–¥–∏ –∏–º—è:")

    await callback.answer()


@dp.message(lambda message: message.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    step = user_inputs.get(user_id)

    if step == "photo_id":
        photo = message.photo[-1]
        file_id = photo.file_id

        temp_profiles[user_id]["photo_id"] = file_id
        data = temp_profiles.pop(user_id)
        user_inputs.pop(user_id)

        await save_user(
            user_id=user_id,
            name=data["name"],
            age=data["age"],
            gender=data["gender"],
            interests=data["interests"],
            photo_id=data["photo_id"]
        )

        await message.answer("–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ!", reply_markup=mainmenu)
    else:
        await message.answer("–°–µ–π—á–∞—Å —Ñ–æ—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")


@dp.message()
async def handle_input(message: Message):
    if not message.text:
        return

    text = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id
    step = user_inputs.get(user_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã
    if step == "name":
        temp_profiles[user_id] = {"name": text}
        user_inputs[user_id] = "age"
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

    elif step == "age":
        if text.isdigit():
            temp_profiles[user_id]["age"] = int(text)
            user_inputs[user_id] = "gender"
            await message.answer("–¢–≤–æ–π –ø–æ–ª?", reply_markup=gender)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ.")

    elif step == "gender":
        if text in ["–ü–∞—Ä–µ–Ω—å", "–î–µ–≤—É—à–∫–∞"]:
            temp_profiles[user_id]["gender"] = text
            user_inputs[user_id] = "interests"
            await message.answer("–ü—Ä–∏–¥—É–º–∞–π –∫–ª–∞—Å—Å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.", reply_markup=gender)

    elif step == "interests":
        temp_profiles[user_id]["interests"] = text
        user_inputs[user_id] = "photo_id"
        await message.answer("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–∫—É –Ω–∞ –∞–≤—É üì∏")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å"
    elif text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å":
        user_id = message.from_user.id
        profile = await get_user(user_id)
        if not profile:
            await bot.send_message(chat_id, "–¢—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∞–Ω–∫–µ—Ç—É. –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å? üòä", reply_markup=choose)
        else:
            await send_profile(user_id, chat_id)

    elif text.lower() == "–ª–µ–Ω—Ç–∞":
        await sendrandom_profile(message.from_user.id, message.chat.id)
        

    else:
        await message.answer("–ù–∞–ø–∏—à–∏ /setname —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.")


async def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await init_db()
    await set_commands(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())