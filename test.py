import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import logging
import os
from conf import TOKEN
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import BotCommand

choose = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–î–∞", callback_data="yes"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="no")
        ]
    ]
)


# üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üß† –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

users = []
authorizeusers = []
user_inputs = {}         # –•—Ä–∞–Ω–∏–º —Å—Ç–∞—Ç—É—Å—ã –≤–≤–æ–¥–∞
user_profiles = {}       # –•—Ä–∞–Ω–∏–º –∞–Ω–∫–µ—Ç—ã (user_id: {–∏–º—è})


async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å"),
        BotCommand(command="setname", description="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
        BotCommand(command="profile", description="–ú–æ—è –∞–Ω–∫–µ—Ç–∞"),
        BotCommand(command="profiles", description="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç"),
    ]
    await bot.set_my_commands(commands)


# /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∞–Ω–∫–µ—Ç—É.")

# /profile ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–µ—Å–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
@dp.message(Command("profile"))
async def profile_command(message: Message):
    user_id = message.from_user.id
    if user_id not in authorizeusers:
        await message.answer("–û, —è –≤–∏–∂—É —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –ù–∞–ø–∏—à–∏ /setname —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∏–º—è.")
    else:
        name = user_profiles.get(user_id, {}).get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        await message.answer(f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –¢–≤–æ—ë –∏–º—è: {name}")

# /setname ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –∏–º–µ–Ω–∏
# –ö–æ–º–∞–Ω–¥–∞ /setname
@dp.message(Command("setname"))
async def set_name(message: Message):
    user_id = message.from_user.id
    if user_id not in authorizeusers:
        user_inputs[user_id] = "waiting_for_name"
        await message.answer("–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    else:
        await message.answer(
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –•–æ—á–µ—à—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=choose)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º
@dp.callback_query()
async def handle_re_register(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data—ã

    if action == "yes":
        if user_id in users:
            users.remove(user_id)
        if user_id in authorizeusers:
            authorizeusers.remove(user_id)
        user_inputs[user_id] = "waiting_for_name"
        await callback.message.answer("–°–æ–ª–Ω—ã—à–∫–æ, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:")
    elif action == "no":
        await callback.message.answer("–•–æ—Ä–æ—à–æ, –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å üòä")

    await callback.answer()




# /profiles ‚Äî –æ—Ç–ª–∞–¥–∫–∞: —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message(Command("profiles"))
async def profiles_command(message: Message):
    await message.answer(f"ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {authorizeusers}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ –∂–¥—ë–º –∏–º—è)
@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    text = message.text

    if user_inputs.get(user_id) == "waiting_for_name":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        user_profiles[user_id] = {"name": text}
        authorizeusers.append(user_id)
        users.append(user_id)

        user_inputs[user_id] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
        await message.answer(f"–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {text}")
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –ù–∞–ø–∏—à–∏ /setname —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –∏–º—è.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await set_commands(bot)  # ‚Üê –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ Telegr
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
